struct Vec3 {
    float x;
    float y;
    float z;
};

Vec3 __operator__neg__(Vec3 a) {
    return Vec3(-a.x, -a.y, -a.z);
}

Vec3 __operator__compl__(Vec3 a) {
    return Vec3(
        ~(a.x != 0.0),
        ~(a.y != 0.0),
        ~(a.z != 0.0));
}

Vec3 __operator__not__(Vec3 a) {
    return Vec3(
        a.x == 0.0,
        a.y == 0.0,
        a.z == 0.0);
}

Vec3 __operator__mul__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x * b.x,
        a.y * b.y,
        a.z * b.z);
}

Vec3 __operator__mul__(Vec3 a, float b) {
    return Vec3(
        a.x * b,
        a.y * b,
        a.z * b);
}

Vec3 __operator__mul__(float a, Vec3 b) {
    return Vec3(
        a * b.x,
        a * b.y,
        a * b.z);
}

Vec3 __operator__div__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x / b.x,
        a.y / b.y,
        a.z / b.z);
}

Vec3 __operator__div__(Vec3 a, float b) {
    return Vec3(
        a.x / b,
        a.y / b,
        a.z / b);
}

Vec3 __operator__div__(float a, Vec3 b) {
    return Vec3(
        a / b.x,
        a / b.y,
        a / b.z);
}

Vec3 __operator__add__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x + b.x,
        a.y + b.y,
        a.z + b.z);
}

Vec3 __operator__add__(Vec3 a, float b) {
    return Vec3(
        a.x + b,
        a.y + b,
        a.z + b);
}

Vec3 __operator__add__(float a, Vec3 b) {
    return Vec3(
        a + b.x,
        a + b.y,
        a + b.z);
}

Vec3 __operator__sub__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x - b.x,
        a.y - b.y,
        a.z - b.z);
}

Vec3 __operator__sub__(Vec3 a, float b) {
    return Vec3(
        a.x - b,
        a.y - b,
        a.z - b);
}

Vec3 __operator__sub__(float a, Vec3 b) {
    return Vec3(
        a - b.x,
        a - b.y,
        a - b.z);
}

int __operator__eq__(Vec3 a, Vec3 b) {
    return (a.x == b.x) &&
           (a.y == b.y) &&
           (a.z == b.z);
}

int __operator__eq__(Vec3 a, float b) {
    return (a.x == b) &&
           (a.y == b) &&
           (a.z == b);
}

int __operator__eq__(float a, Vec3 b) {
    return (a == b.x) &&
           (a == b.y) &&
           (a == b.z);
}

int __operator__neq__(Vec3 a, Vec3 b) {
    return (a.x != b.x) ||
           (a.y != b.y) ||
           (a.z != b.z);
}

int __operator__neq__(Vec3 a, float b) {
    return (a.x != b) ||
           (a.y != b) ||
           (a.z != b);
}

int __operator__neq__(float a, Vec3 b) {
    return (a != b.x) ||
           (a != b.y) ||
           (a != b.z);
}

Vec3 __operator__bitand__(Vec3 a, Vec3 b) {
    // AND(A, B) := A * B
    return Vec3(
        (a.x != 0.0) & (b.x != 0.0),
        (a.y != 0.0) & (b.y != 0.0),
        (a.z != 0.0) & (b.z != 0.0));
}

Vec3 __operator__bitand__(Vec3 a, float b) {
    int btrue = b != 0.0;
    return Vec3(
        (a.x != 0.0) & btrue,
        (a.y != 0.0) & btrue,
        (a.z != 0.0) & btrue);
}

Vec3 __operator__bitand__(float a, Vec3 b) {
    int atrue = a != 0.0;
    return Vec3(
        atrue & (b.x != 0.0),
        atrue & (b.y != 0.0),
        atrue & (b.z != 0.0));
}

Vec3 __operator__xor__(Vec3 a, Vec3 b) {
    // XOR(A, B) := A + B - 2 * A * B;
    return Vec3(
        (a.x != 0.0) ^ (b.x != 0.0),
        (a.y != 0.0) ^ (b.y != 0.0),
        (a.z != 0.0) ^ (b.z != 0.0));
}

Vec3 __operator__xor__(Vec3 a, float b) {
    int btrue = b != 0.0;
    return Vec3(
        (a.x != 0.0) ^ btrue,
        (a.y != 0.0) ^ btrue,
        (a.z != 0.0) ^ btrue);
}

Vec3 __operator__xor__(float a, Vec3 b) {
    int atrue = a != 0.0;
    return Vec3(
        atrue ^ (b.x != 0.0),
        atrue ^ (b.y != 0.0),
        atrue ^ (b.z != 0.0));
}

Vec3 __operator__bitor__(Vec3 a, Vec3 b) {
    // OR(A, B) := A + B - A * B
    return Vec3(
        (a.x != 0.0) | (b.x != 0.0),
        (a.y != 0.0) | (b.y != 0.0),
        (a.z != 0.0) | (b.z != 0.0));
}

Vec3 __operator__bitor__(Vec3 a, float b) {
    int btrue = b != 0.0;
    return Vec3(
        (a.x != 0.0) | btrue,
        (a.y != 0.0) | btrue,
        (a.z != 0.0) | btrue);
}

Vec3 __operator__bitor__(float a, Vec3 b) {
    int atrue = a != 0.0;
    return Vec3(
        atrue | (b.x != 0.0),
        atrue | (b.y != 0.0),
        atrue | (b.z != 0.0));
}

Vec3 abs(Vec3 a) {
    return Vec3(
        abs(a.x),
        abs(a.y),
        abs(a.z));
}

Vec3 ceil(Vec3 a) {
    return Vec3(
        ceil(a.x),
        ceil(a.y),
        ceil(a.z));
}

Vec3 floor(Vec3 a) {
    return Vec3(
        floor(a.x),
        floor(a.y),
        floor(a.z));
}

Vec3 round(Vec3 a) {
    return Vec3(
        round(a.x),
        round(a.y),
        round(a.z));
}

Vec3 trunc(Vec3 a) {
    return Vec3(
        trunc(a.x),
        trunc(a.y),
        trunc(a.z));
}

Vec3 fract(Vec3 a) {
    return Vec3(
        a.x - trunc(a.x),
        a.y - trunc(a.y),
        a.z - trunc(a.z));
}

Vec3 fmod(Vec3 a, Vec3 b) {
    return Vec3(
        fmod(a.x, b.x),
        fmod(a.y, b.y),
        fmod(a.z, b.z));
}

Vec3 fmod(float a, Vec3 b) {
    return Vec3(
        fmod(a, b.x),
        fmod(a, b.y),
        fmod(a, b.z));
}

Vec3 fmod(Vec3 a, float b) {
    return Vec3(
        fmod(a.x, b),
        fmod(a.y, b),
        fmod(a.z, b));
}

Vec3 mod(Vec3 a, Vec3 b) {
    return Vec3(
        mod(a.x, b.x),
        mod(a.y, b.y),
        mod(a.z, b.z));
}

Vec3 mod(float a, Vec3 b) {
    return Vec3(
        mod(a, b.x),
        mod(a, b.y),
        mod(a, b.z));
}

Vec3 mod(Vec3 a, float b) {
    return Vec3(
        mod(a.x, b),
        mod(a.y, b),
        mod(a.z, b));
}

Vec3 max(Vec3 a, Vec3 b) {
    return Vec3(
        max(a.x, b.x),
        max(a.y, b.y),
        max(a.z, b.z));
}

Vec3 min(Vec3 a, Vec3 b) {
    return Vec3(
        min(a.x, b.x),
        min(a.y, b.y),
        min(a.z, b.z));
}

Vec3 clamp(Vec3 v, Vec3 lb, Vec3 ub) {
    return Vec3(
        clamp(v.x, lb.x, ub.x),
        clamp(v.y, lb.y, ub.y),
        clamp(v.z, lb.z, ub.z));
}

Vec3 clamp(Vec3 v, float lb, float ub) {
    return Vec3(
        clamp(v.x, lb, ub),
        clamp(v.y, lb, ub),
        clamp(v.z, lb, ub));
}

Vec3 step(Vec3 edge, Vec3 x) {
    return Vec3(
        step(edge.x, x.x),
        step(edge.y, x.y),
        step(edge.z, x.z));
}

Vec3 linearstep(Vec3 edge0, Vec3 edge1, Vec3 x) {
    return Vec3(
        linearstep(edge0.x, edge1.x, x.x),
        linearstep(edge0.y, edge1.y, x.y),
        linearstep(edge0.z, edge1.z, x.z));
}

Vec3 smoothstep(Vec3 edge0, Vec3 edge1, Vec3 x) {
    return Vec3(
        smoothstep(edge0.x, edge1.x, x.x),
        smoothstep(edge0.y, edge1.y, x.y),
        smoothstep(edge0.z, edge1.z, x.z));
}

Vec3 mix(Vec3 a, Vec3 b, float t) {
    return ((1.0 - t) * a) + (t * b);
}

Vec3 mix(Vec3 a, Vec3 b, Vec3 t) {
    return Vec3(
        mix(a.x, b.x, t.x),
        mix(a.y, b.y, t.y),
        mix(a.z, b.z, t.z));
}

Vec3 cross(Vec3 a, Vec3 b) {
    return Vec3(
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x);
}

float dot(Vec3 a, Vec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

float length(Vec3 a) {
    return hypot(a.x, a.y, a.z);
}

float distance(Vec3 a, Vec3 b) {
    return hypot(
        b.x - a.x,
        b.y - a.y,
        b.z - a.z);
}

Vec3 normalize(Vec3 a) {
    return a / length(a);
}

Vec3 faceforward(Vec3 n, Vec3 i, Vec3 nref) {
    if(dot(i, nref) > 0.0) {
        return -n;
    }
    return n;
}

Vec3 reflect(Vec3 i, Vec3 n) {
    return i - ((2.0 * dot(n, i)) * n);
}

Vec3 refract(Vec3 i, Vec3 n, float eta) {
    float iDotN = dot(i, n);
    float k = 1.0 - eta * eta * (1.0 - iDotN * iDotN);

    if (k < 0.0) {
        return Vec3(0.0, 0.0, 0.0);
    }
    return (eta * i) - (n * (eta * iDotN + sqrt(k)));
}

float projectScalar(Vec3 a, Vec3 b) {
    return dot(a, b) / dot(b, b);
}

Vec3 projectVector(Vec3 a, Vec3 b) {
    return b * projectScalar(a, b);
}

Vec3 reject(Vec3 a, Vec3 b) {
    return a - projectVector(a, b);
}

Vec3 rescale(Vec3 v, float scalar) {
    return scalar * normalize(v);
}

Vec3 limit(Vec3 v, float lmt) {
    if (dot(v, v) > lmt * lmt) {
        return rescale(v, lmt);
    }
    return v;
}

Vec3 copySign(Vec3 m, Vec3 s) {
    return Vec3(
        abs(m.x) * sign(s.x),
        abs(m.y) * sign(s.y),
        abs(m.z) * sign(s.z));
}

Vec3 sign(Vec3 v) {
    return Vec3(
        sign(v.x),
        sign(v.y),
        sign(v.z));
}

Vec3 quantize(Vec3 v, Vec3 delta) {
    if(delta == 0.0) {
        return v;
    }
    return delta * floor(0.5 + (v / delta));
}

Vec3 back() {
    return Vec3(0.0, -1.0, 0.0);
}

Vec3 down() {
    return Vec3(0.0, 0.0, -1.0);
}

Vec3 forward() {
    return Vec3(0.0, 1.0, 0.0);
}

Vec3 left() {
    return Vec3(-1.0, 0.0, 0.0);
}

Vec3 right() {
    return Vec3(1.0, 0.0, 0.0);
}

Vec3 up() {
    return Vec3(0.0, 0.0, 1.0);
}

int all(Vec3 v) {
    return v.x != 0.0 &&
           v.y != 0.0 &&
           v.z != 0.0;
}

int any(Vec3 v) {
    return v.x != 0.0 ||
           v.y != 0.0 ||
           v.z != 0.0;
}

int none(Vec3 v) {
    return v.x == 0.0 &&
           v.y == 0.0 &&
           v.z == 0.0;
}

Vec3 cast(vector v) {
    return Vec3(v[0], v[1], v[2]);
}

Vec3 cast(normal n) {
    return Vec3(n[0], n[1], n[2]);
}

Vec3 cast(point p) {
    return Vec3(p[0], p[1], p[2]);
}

vector cast(Vec3 v) {
    return vector(v.x, v.y, v.z);
}

shader Vec3Struct(
    vector Point = P,

    output vector Result = P) {
}