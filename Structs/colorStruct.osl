struct Color {
    float r;
    float g;
    float b;
    float a;
};

Color fromHexArgb(int hex) {
    return Color(
        0.003921569 * (hex >> 0x10 & 0xff),
        0.003921569 * (hex >> 0x08 & 0xff),
        0.003921569 * (hex         & 0xff),
        0.003921569 * (hex >> 0x18 & 0xff));
}

Color invert(Color a) {
    return Color(
        clamp(1.0 - a.r, 0.0, 1.0),
        clamp(1.0 - a.g, 0.0, 1.0),
        clamp(1.0 - a.b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

int toHexArgb(Color c) {
    return int(c.a * 0xff + 0.5) << 0x18
         | int(c.r * 0xff + 0.5) << 0x10
         | int(c.g * 0xff + 0.5) << 0x08
         | int(c.b * 0xff + 0.5);
}

Color __operator__compl__(Color a) {
    return fromHexArgb(~toHexArgb(a));
}

Color __operator__shl__(Color a, int b) {
    return fromHexArgb(toHexArgb(a) << b);
}
Color __operator__shr__(Color a, int b) {
    return fromHexArgb(toHexArgb(a) >> b);
}

Color __operator__mul__(Color a, Color b) {
    return Color(
        clamp(a.r * b.r, 0.0, 1.0),
        clamp(a.g * b.g, 0.0, 1.0),
        clamp(a.b * b.b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

Color __operator__mul__(Color a, float b) {
    return Color(
        clamp(a.r * b, 0.0, 1.0),
        clamp(a.g * b, 0.0, 1.0),
        clamp(a.b * b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

Color __operator__mul__(float a, Color b) {
    return Color(
        clamp(a * b.r, 0.0, 1.0),
        clamp(a * b.g, 0.0, 1.0),
        clamp(a * b.b, 0.0, 1.0),
        clamp(a, 0.0, 1.0));
}

Color __operator__div__(Color a, Color b) {
    return Color(
        clamp(a.r / b.r, 0.0, 1.0),
        clamp(a.g / b.g, 0.0, 1.0),
        clamp(a.b / b.b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

Color __operator__div__(Color a, float b) {
    return Color(
        clamp(a.r / b, 0.0, 1.0),
        clamp(a.g / b, 0.0, 1.0),
        clamp(a.b / b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

Color __operator__div__(float a, Color b) {
    return Color(
        clamp(a / b.r, 0.0, 1.0),
        clamp(a / b.g, 0.0, 1.0),
        clamp(a / b.b, 0.0, 1.0),
        clamp(a, 0.0, 1.0));
}

Color __operator__add__(Color a, Color b) {
    return Color(
        clamp(a.r + b.r, 0.0, 1.0),
        clamp(a.g + b.g, 0.0, 1.0),
        clamp(a.b + b.b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

Color __operator__sub__(Color a, Color b) {
    return Color(
        clamp(a.r - b.r, 0.0, 1.0),
        clamp(a.g - b.g, 0.0, 1.0),
        clamp(a.b - b.b, 0.0, 1.0),
        clamp(a.a, 0.0, 1.0));
}

int __operator__eq__(Color a, Color b) {
    return toHexArgb(a) == toHexArgb(b);
}

int __operator__neq__(Color a, Color b) {
    return toHexArgb(a) != toHexArgb(b);
}

Color __operator__bitand__(Color a, Color b) {
    return fromHexArgb(toHexArgb(a) & toHexArgb(b));
}

Color __operator__xor__(Color a, Color b) {
    return fromHexArgb(toHexArgb(a) ^ toHexArgb(b));
}

Color __operator__bitor__(Color a, Color b) {
    return fromHexArgb(toHexArgb(a) | toHexArgb(b));
}

Color step(Color edge, Color x) {
    return Color(
        step(edge.r, x.r),
        step(edge.g, x.g),
        step(edge.b, x.b),
        step(edge.a, x.a));
}

Color linearstep(Color edge0, Color edge1, Color x) {
    return Color(
        linearstep(edge0.r, edge1.r, x.r),
        linearstep(edge0.g, edge1.g, x.g),
        linearstep(edge0.b, edge1.b, x.b),
        linearstep(edge0.a, edge1.a, x.a));
}

Color smoothstep(Color edge0, Color edge1, Color x) {
    return Color(
        smoothstep(edge0.r, edge1.r, x.r),
        smoothstep(edge0.g, edge1.g, x.g),
        smoothstep(edge0.b, edge1.b, x.b),
        smoothstep(edge0.a, edge1.a, x.a));
}

Color mix(Color a, Color b, float t) {
    float u = 1.0 - t;
    return Color(
        u * a.r + t * b.r,
        u * a.g + t * b.g,
        u * a.b + t * b.b,
        u * a.a + t * b.a);
}

Color mix(Color a, Color b, Color t) {
    return Color(
        mix(a.r, b.r, t.r),
        mix(a.g, b.g, t.g),
        mix(a.b, b.b, t.b),
        mix(a.a, b.a, t.a));
}

int all(Color c) {
    return c.a > 0.0 &&
        c.r > 0.0 &&
        c.g > 0.0 &&
        c.b > 0.0;
}

int any(Color c) {
    return c.a > 0.0;
}

int none(Color c) {
    return c.a <= 0.0;
}

Color clamp(Color c, float lb, float ub) {
    return Color(
        clamp(c.r, lb, ub),
        clamp(c.g, lb, ub),
        clamp(c.b, lb, ub),
        clamp(c.a, lb, ub));
}

Color clamp(Color c) {
    return clamp(c, 0.0, 1.0);
}

Color quantize(Color c, float delta) {
    if(delta == 0.0) {
        return c;
    }

    float n = 1.0 / delta;
    return Color(
        delta * floor(0.5 + (c.r * n)),
        delta * floor(0.5 + (c.g * n)),
        delta * floor(0.5 + (c.b * n)),
        delta * floor(0.5 + (c.a * n)));
}

Color quantize(Color c, Color delta) {
    if(delta == 0x0) {
        return c;
    }

    return Color(
        delta.r * floor(0.5 + (c.r / delta.r)),
        delta.g * floor(0.5 + (c.g / delta.g)),
        delta.b * floor(0.5 + (c.b / delta.b)),
        delta.a * floor(0.5 + (c.a / delta.a)));
}

Color blue() {
    return Color(0.0, 0.0, 1.0, 1.0);
}

Color clearBlack() {
    return Color(0.0, 0.0, 0.0, 0.0);
}

Color clearWhite() {
    return Color(1.0, 1.0, 1.0, 0.0);
}

Color cyan() {
    return Color(0.0, 1.0, 1.0, 1.0);
}

Color green() {
    return Color(0.0, 1.0, 0.0, 1.0);
}

Color magenta() {
    return Color(1.0, 0.0, 1.0, 1.0);
}

Color red() {
    return Color(1.0, 0.0, 0.0, 1.0);
}

Color yellow() {
    return Color(1.0, 1.0, 0.0, 1.0);
}

Color white() {
    return Color(1.0, 1.0, 1.0, 1.0);
}

color cast(Color c) {
    return color(c.r, c.g, c.b);
}

Color cast(color c) {
    return Color(c[0], c[1], c[2], 1.0);
}

shader colorStruct(
    color A = 0.0,
    color B = 0.0,

    output color C = 0.0) {
   
    Color a = cast(A);
    Color b = cast(B);
    Color c = quantize(a, b);
    C = cast(c);
}