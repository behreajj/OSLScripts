struct Vec3 {
    float x;
    float y;
    float z;
};

Vec3 __operator__neg__(Vec3 a) {
    return Vec3(-a.x, -a.y, -a.z);
}

Vec3 __operator__mul__(Vec3 a, float b) {
    return Vec3(
        a.x * b,
        a.y * b,
        a.z * b);
}

Vec3 __operator__mul__(float a, Vec3 b) {
    return Vec3(
        a * b.x,
        a * b.y,
        a * b.z);
}

Vec3 __operator__div__(Vec3 a, float b) {
    return Vec3(
        a.x / b,
        a.y / b,
        a.z / b);
}

Vec3 __operator__add__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x + b.x,
        a.y + b.y,
        a.z + b.z);
}

Vec3 __operator__sub__(Vec3 a, Vec3 b) {
    return Vec3(
        a.x - b.x,
        a.y - b.y,
        a.z - b.z);
}

int __operator__eq__(Vec3 a, Vec3 b) {
    return (a.x == b.x) &&
           (a.y == b.y) &&
           (a.z == b.z);
}

int __operator__eq__(Vec3 a, float b) {
    return (a.x == b) &&
           (a.y == b) &&
           (a.z == b);
}

int __operator__eq__(float a, Vec3 b) {
    return (a == b.x) &&
           (a == b.y) &&
           (a == b.z);
}

int __operator__neq__(Vec3 a, Vec3 b) {
    return (a.x != b.x) ||
           (a.y != b.y) ||
           (a.z != b.z);
}

int __operator__neq__(Vec3 a, float b) {
    return (a.x != b) ||
           (a.y != b) ||
           (a.z != b);
}

int __operator__neq__(float a, Vec3 b) {
    return (a != b.x) ||
           (a != b.y) ||
           (a != b.z);
}

Vec3 cross(Vec3 a, Vec3 b) {
    return Vec3(
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x);
}

float dot(Vec3 a, Vec3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

float length(Vec3 a) {
    return hypot(a.x, a.y, a.z);
}

Vec3 normalize(Vec3 a) {
    return a / length(a);
}

int none(Vec3 v) {
    return v.x == 0.0 &&
           v.y == 0.0 &&
           v.z == 0.0;
}

Vec3 mix(Vec3 a, Vec3 b, float t) {
    return Vec3(
        mix(a.x, b.x, t),
        mix(a.y, b.y, t),
        mix(a.z, b.z, t));
}

struct Quaternion {
    float real;
    Vec3 imag;
};

float dot(Quaternion a, Quaternion b) {
    return (a.real * b.real) + dot(a.imag, b.imag);
}

float length(Quaternion q) {
    return sqrt(dot(q, q));
}

Quaternion __operator__neg__(Quaternion q) {
    return Quaternion(-q.real, -q.imag);
}

Quaternion __operator__mul__(Quaternion a, float b) {
    return Quaternion(a.real * b, a.imag * b);
}

Quaternion __operator__mul__(float a, Quaternion b) {
    return Quaternion(a * b.real, a * b.imag);
}

Quaternion __operator__mul__(Quaternion a, Quaternion b) {
    return Quaternion(
        (a.real * b.real) -
            dot(a.imag, b.imag),

        cross(a.imag, b.imag) +
            (a.real * b.imag) +
            (b.real * a.imag));
}

Quaternion __operator__mul__(Quaternion a, Vec3 b) {
    return Quaternion(
        -dot(a.imag, b),
        cross(a.imag, b) +
            (a.real * b));
}

Quaternion __operator__mul__(Vec3 a, Quaternion b) {
    return Quaternion(
        -dot(a, b.imag),
        cross(a, b.imag) +
            (b.real * a));
}

Quaternion __operator__div__(Quaternion a, float b) {
    return Quaternion(a.real / b, a.imag / b);
}

Quaternion conj(Quaternion q) {
    return Quaternion(q.real, -q.imag);
}

Quaternion inverse(Quaternion q) {
    return conj(q) / dot(q, q);
}

Quaternion __operator__div__(float a, Quaternion b) {
    return a * inverse(b);
}

Quaternion __operator__div__(Quaternion a, Quaternion b) {
    return a * inverse(b);
}

Quaternion __operator__div__(Quaternion a, Vec3 b) {
    return a * (-b / dot(b, b));
}

Quaternion __operator__div__(Vec3 a, Quaternion b) {
    return a * inverse(b);
}

Quaternion __operator__add__(Quaternion a, float b) {
    return Quaternion(a.real + b, a.imag);
}

Quaternion __operator__add__(float a, Quaternion b) {
    return Quaternion(a + b.real, b.imag);
}

Quaternion __operator__add__(Quaternion a, Quaternion b) {
    return Quaternion(a.real + b.real, a.imag + b.imag);
}

Quaternion __operator__add__(Quaternion a, Vec3 b) {
    return Quaternion(a.real, a.imag + b);
}

Quaternion __operator__add__(Vec3 a, Quaternion b) {
    return Quaternion(b.real, a + b.imag);
}

Quaternion __operator__sub__(Quaternion a, float b) {
    return Quaternion(a.real - b, a.imag);
}

Quaternion __operator__sub__(float a, Quaternion b) {
    return Quaternion(a - b.real, -b.imag);
}

Quaternion __operator__sub__(Quaternion a, Quaternion b) {
    return Quaternion(a.real - b.real, a.imag - b.imag);
}

Quaternion __operator__sub__(Quaternion a, Vec3 b) {
    return Quaternion(a.real, a.imag - b);
}

Quaternion __operator__sub__(Vec3 a, Quaternion b) {
    return Quaternion(-b.real, a - b.imag);
}

int __operator__eq__(Quaternion a, Quaternion b) {
    return a.real == b.real && a.imag == b.imag;
}

int __operator__eq__(Quaternion a, float b) {
    return a.real == b && a.imag == 0.0;
}

int __operator__eq__(float a, Quaternion b) {
    return a == b.real && 0.0 == b.imag;
}

int __operator__eq__(Quaternion a, Vec3 b) {
    return a.real == 0.0 && a.imag == b;
}

int __operator__eq__(Vec3 a, Quaternion b) {
    return 0.0 == b.real && a == b.imag;
}

int __operator__neq__(Quaternion a, Quaternion b) {
    return a.real != b.real || a.imag != b.imag;
}

int __operator__neq__(Quaternion a, float b) {
    return a.real != b || a.imag != 0.0;
}

int __operator__neq__(float a, Quaternion b) {
    return a != b.real || 0.0 != b.imag;
}

int __operator__neq__(Quaternion a, Vec3 b) {
    return a.real != 0.0 || a.imag != b;
}

int __operator__neq__(Vec3 a, Quaternion b) {
    return 0.0 != b.real || a != b.imag;
}

Quaternion identity() {
    return Quaternion(1.0, Vec3(0.0, 0.0, 0.0));
}

Quaternion normalize(Quaternion q) {
    return q / length(q);
}

Vec3 applyTo(Quaternion r, Vec3 p) {
    Quaternion nr = normalize(r);
    Quaternion rpr = (nr * p) * inverse(nr);
    return rpr.imag;
}

Quaternion fromAxisAngle(float radians, Vec3 axis) {
    float cosah;
    float sinah;
    sincos(mod(radians, M_2PI) * 0.5, sinah, cosah);

    return Quaternion(
        cosah, sinah * normalize(axis));
}

Quaternion rotateX(Quaternion q, float radians) {
    float cosah;
    float sinah;
    sincos(mod(radians, M_2PI) * 0.5, sinah, cosah);

    return Quaternion(
        cosah * q.real - sinah * q.imag.x,
        Vec3(
            cosah * q.imag.x + sinah * q.real,
            cosah * q.imag.y + sinah * q.imag.z,
            cosah * q.imag.z - sinah * q.imag.y));
}

Quaternion rotateY(Quaternion q, float radians) {
    float cosah;
    float sinah;
    sincos(mod(radians, M_2PI) * 0.5, sinah, cosah);

    return Quaternion(
        cosah * q.real - sinah * q.imag.y,
        Vec3(
            cosah * q.imag.x - sinah * q.imag.z,
            cosah * q.imag.y + sinah * q.real,
            cosah * q.imag.z + sinah * q.imag.x));
}

Quaternion rotateZ(Quaternion q, float radians) {
    float cosah;
    float sinah;
    sincos(mod(radians, M_2PI) * 0.5, sinah, cosah);

    return Quaternion(
        cosah * q.real - sinah * q.imag.z,
        Vec3(
            cosah * q.imag.x + sinah * q.imag.y,
            cosah * q.imag.y - sinah * q.imag.x,
            cosah * q.imag.z + sinah * q.real));
}

Quaternion exp(Quaternion q) {
    float mgimsq = dot(q.imag, q.imag);
    if(mgimsq > 0.0){
        float wexp = exp(q.real);
        float mgim = sqrt(mgimsq);
        float s = wexp * sin(mgim) / mgim;
        return Quaternion(
            wexp * cos(mgim),
            q.imag * s);
    }
    return Quaternion(1.0, Vec3(0.0, 0.0, 0.0));
}

Quaternion log(Quaternion q) {
    float mgimsq = dot(q.imag, q.imag);
    float w = 0.5 * log(q.real * q.real + mgimsq);
    if(mgimsq > 0.0) {
        float mgim = sqrt(mgimsq);
        float t = atan2(mgim, w) / mgim;
        return Quaternion(w, q.imag * t);
    }
    return Quaternion(w, Vec3(0.0, 0.0, 0.0));
}

Quaternion pow(Quaternion a, float b) {
    return exp(log(a) * b);
}

float angle(Quaternion q) {
    return 2.0 * acos(q.real / length(q));
}

Vec3 axis(Quaternion q) {
    Quaternion qnorm = normalize(q);
    float theta = 2.0 * acos(qnorm.real);
    return normalize(qnorm.imag / (M_2PI - theta));
}

Quaternion fromAxes(Vec3 right, Vec3 forward, Vec3 up) {
    //TODO: Needs testing....
    float rx = right.x;
    float fy = forward.y;
    float uz = up.z;

    float w = 0.5 * sqrt(1.0 + rx + fy + uz);
    float x = 0.5 * sqrt(1.0 + rx - fy - uz);
    float y = 0.5 * sqrt(1.0 - rx + fy - uz);
    float z = 0.5 * sqrt(1.0 - rx - fy + uz);

    x = abs(x) * sign(forward.z - up.y);
    y = abs(y) * sign(up.x - right.z);
    z = abs(z) * sign(right.y - forward.x);

    return Quaternion(w, Vec3(x, y, z));
}

shader quatStruct(
    float SeedReal = 1.0,
    vector SeedImag = vector(0.0, 0.0, 0.0),

    float ZReal = 1.0,
    vector ZImag = vector(0.0, 0.0, 0.0),

    float Exp = 2.0,
    int itr = 32,

    output float Fac = 0.0,
    output float QReal = 1.0,
    output vector QImag = vector(0.0, 0.0, 0.0)) {

    Quaternion seed = Quaternion(
        SeedReal,
        Vec3(SeedImag[0], SeedImag[1], SeedImag[2]));

    Quaternion z = Quaternion(
        ZReal,
        Vec3(ZImag[0], ZImag[1], ZImag[2]));

    Quaternion target = z;

    int i = 0;
    for(; i < itr && length(target) < 2.0; ++i) {
        target = pow(target, Exp);
        target = target + seed;
    }
    Fac = i >= itr ? 0.0 : clamp(i / (float)itr, 0.0, 1.0);
    target = normalize(target);
    QReal = target.real;
    QImag = vector(target.imag.x, target.imag.y, target.imag.z);
}