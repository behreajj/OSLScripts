struct Quaternion {
  float real;
  vector imag;
};

Quaternion __operator__mul__(Quaternion a, float b) {
  return Quaternion(a.real * b, a.imag * b);
}

Quaternion __operator__mul__(float a, Quaternion b) {
  return Quaternion(a * b.real, a * b.imag);
}

Quaternion __operator__mul__(Quaternion a, Quaternion b) {
  return Quaternion(
      (a.real * b.real) -
        dot(a.imag, b.imag),
      cross(a.imag, b.imag) +
        (a.real * b.imag) +
        (b.real * a.imag));
}

Quaternion __operator__mul__(Quaternion a, vector b) {
  return Quaternion(
      -dot(a.imag, b),
      cross(a.imag, b) +
      (a.real * b));
}

Quaternion __operator__mul__(vector a, Quaternion b) {
  return Quaternion(
      -dot(a, b.imag),
      cross(a, b.imag) +
      (b.real * a));
}

Quaternion __operator__div__(Quaternion a, float b) {
  return Quaternion(a.real / b, a.imag / b);
}

Quaternion conj(Quaternion q) {
  return Quaternion(q.real, -q.imag);
}

float dot(Quaternion a, Quaternion b) {
  return (a.real * b.real) + dot(a.imag, b.imag);
}

Quaternion inverse(Quaternion q) {
  return conj(q) / dot(q, q);
}

Quaternion __operator__div__(float a, Quaternion b) {
  return a * inverse(b);
}

Quaternion __operator__div__(Quaternion a, Quaternion b) {
  return a * inverse(b);
}

Quaternion __operator__div__(Quaternion a, vector b) {
  return a * (-b / dot(b, b));
}

Quaternion __operator__div__(vector a, Quaternion b) {
  return a * inverse(b);
}

Quaternion __operator__add__(Quaternion a, float b) {
  return Quaternion(a.real + b, a.imag);
}

Quaternion __operator__add__(float a, Quaternion b) {
  return Quaternion(a + b.real, b.imag);
}

Quaternion __operator__add__(Quaternion a, Quaternion b) {
  return Quaternion(a.real + b.real, a.imag + b.imag);
}

Quaternion __operator__add__(Quaternion a, vector b) {
  return Quaternion(a.real, a.imag + b);
}

Quaternion __operator__add__(vector a, Quaternion b) {
  return Quaternion(b.real, a + b.imag);
}

Quaternion __operator__sub__(Quaternion a, float b) {
  return Quaternion(a.real - b, a.imag);
}

Quaternion __operator__sub__(float a, Quaternion b) {
  return Quaternion(a - b.real, -b.imag);
}

Quaternion __operator__sub__(Quaternion a, Quaternion b) {
  return Quaternion(a.real - b.real, a.imag - b.imag);
}

Quaternion __operator__sub__(Quaternion a, vector b) {
  return Quaternion(a.real, a.imag - b);
}

Quaternion __operator__sub__(vector a, Quaternion b) {
  return Quaternion(-b.real, a - b.imag);
}

int __operator__eq__(Quaternion a, Quaternion b) {
  return a.real == b.real && a.imag == b.imag;
}

int __operator__eq__(Quaternion a, float b) {
  return a.real == b && a.imag == 0.0;
}

int __operator__eq__(float a, Quaternion b) {
  return a == b.real && 0.0 == b.imag;
}

int __operator__eq__(Quaternion a, vector b) {
  return a.real == 0.0 && a.imag == b;
}

int __operator__eq__(vector a, Quaternion b) {
  return 0.0 == b.real && a == b.imag;
}

int __operator__ne__(Quaternion a, Quaternion b) {
  return a.real != b.real || a.imag != b.imag;
}

int __operator__ne__(Quaternion a, float b) {
  return a.real != b || a.imag != 0.0;
}

int __operator__ne__(float a, Quaternion b) {
  return a != b.real || 0.0 != b.imag;
}

int __operator__ne__(Quaternion a, vector b) {
  return a.real != 0.0 || a.imag != b;
}

int __operator__ne__(vector a, Quaternion b) {
  return 0.0 != b.real || a != b.imag;
}

Quaternion identity() {
  return Quaternion(1.0, 0.0);
}

float length(Quaternion q) {
  return sqrt(dot(q, q));
}

Quaternion normalize(Quaternion q) {
  return q / length(q);
}

normal applyTo(Quaternion r, normal p) {
  Quaternion nr = normalize(r);
  Quaternion rpr = (nr * p) * inverse(nr);
  return rpr.imag;
}

point applyTo(Quaternion r, point p) {
  Quaternion nr = normalize(r);
  Quaternion rpr = (nr * p) * inverse(nr);
  return rpr.imag;
}

vector applyTo(Quaternion r, vector p) {
  Quaternion nr = normalize(r);
  Quaternion rpr = (nr * p) * inverse(nr);
  return rpr.imag;
}

Quaternion fromAxisAngle(float radians, vector axis) {
    float cosah;
    float sinah;
    sincos(radians * 0.5, sinah, cosah);

    return Quaternion(
      cosah, sinah * normalize(axis));
}

Quaternion rotateX(Quaternion q, float radians) {
  float cosah;
  float sinah;
  sincos(radians * 0.5, sinah, cosah);

  return Quaternion(
      cosah * q.real - sinah * q.imag[0],
      vector(
          cosah * q.imag[0] + sinah * q.real,
          cosah * q.imag[1] + sinah * q.imag[2],
          cosah * q.imag[2] - sinah * q.imag[1]));
}

Quaternion rotateY(Quaternion q, float radians) {
  float cosah;
  float sinah;
  sincos(radians * 0.5, sinah, cosah);

  return Quaternion(
      cosah * q.real - sinah * q.imag[1],
      vector(
          cosah * q.imag[0] - sinah * q.imag[2],
          cosah * q.imag[1] + sinah * q.real,
          cosah * q.imag[2] + sinah * q.imag[0]));
}

Quaternion rotateZ(Quaternion q, float radians) {
  float cosah;
  float sinah;
  sincos(radians * 0.5, sinah, cosah);

  return Quaternion(
      cosah * q.real - sinah * q.imag[2],
      vector(
          cosah * q.imag[0] + sinah * q.imag[1],
          cosah * q.imag[1] - sinah * q.imag[0],
          cosah * q.imag[2] + sinah * q.real));
}

Quaternion rotate(Quaternion q, float radians, vector axis) {
  float wnorm = q.real / length(q);
  float angle0 = 2.0 * acos(wnorm);
  float angle1 = mod(angle0 + radians, M_2PI);
  return fromAxisAngle(angle1, normalize(axis));
}

Quaternion exp(Quaternion q) {
  float cim;
  float sim;
  sincos(length(q.imag), sim, cim);
  return exp(q.real) * Quaternion(
    cim, sim * normalize(q.imag));
}

Quaternion log(Quaternion q) {
  float lenq = length(q);
  float wnorm = q.real / lenq;
  return Quaternion(
    log(lenq),
    acos(wnorm) * normalize(q.imag));
}

Quaternion pow(Quaternion a, float b) {
  float lena = length(a);
  Quaternion anorm = a / lena;
  float theta = 2.0 * acos(anorm.real);
  vector axis = normalize(anorm.imag / (M_2PI - theta));
  float btheta = b * theta;

  float cbt;
  float sbt;
  sincos(btheta, sbt, cbt);

  return pow(lena, b) * Quaternion(
    cbt, sbt * axis);
}

float angle(Quaternion q) {
  return 2.0 * acos(q.real / length(q));
}

vector axis(Quaternion q) {
  Quaternion qnorm = normalize(q);
  float theta = 2.0 * acos(qnorm.real);
  return normalize(qnorm.imag / (M_2PI - theta));
}

Quaternion fromAxes(vector right, vector forward, vector up) {
  //TODO: Needs testing....
  float rx = right[0];
  float fy = forward[1];
  float uz = up[2];

  float w = sqrt(max(0.0, 1.0 + rx + fy + uz)) * 0.5;
  float x = sqrt(max(0.0, 1.0 + rx - fy - uz)) * 0.5;
  float y = sqrt(max(0.0, 1.0 - rx + fy - uz)) * 0.5;
  float z = sqrt(max(0.0, 1.0 - rx - fy + uz)) * 0.5;

  x *= sign(forward[2] - up[1]);
  y *= sign(up[0] - right[2]);
  z *= sign(right[1] - forward[0]);

  return Quaternion(w, vector(x, y, z));
}

Quaternion lookAt(vector dir, vector ref) {
  //TODO: Needs testing....
  vector k = normalize(dir);
  vector i = normalize(cross(normalize(ref), k));
  vector j = normalize(cross(k, i));
  return fromAxes(i, j, k);
}

shader quatStruct(
    float QReal = 1.0,
    vector QImag = 0.0,
    float Radians = 0.0,
    vector Axis = vector(1.0, 0.0, 0.0),
    point Point = P,

    output float Real = 1.0,
    output vector Imag = 0.0,
    output point Rotated = P) {

  Quaternion q = Quaternion(QReal, QImag);
  Quaternion r = rotate(q, Radians, Axis);

  Real = r.real;
  Imag = r.imag;
  Rotated = applyTo(r, Point);
}