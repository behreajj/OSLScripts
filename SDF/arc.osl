float arc(point pt, float angOffset, float aperture, float bounds, float weight) {

    float sinOff;
    float cosOff;
    sincos(angOffset, sinOff, cosOff);

    float sinAprt;
    float cosAprt;
    sincos(aperture, sinAprt, cosAprt);

    float px0 = abs(sinOff * pt[0] - cosOff * pt[1]);
    float py0 = cosOff * pt[0] + sinOff * pt[1];

    float dotp = px0 * px0 + py0 * py0;
    float k = cosAprt * px0 > sinAprt * py0
            ? px0 * sinAprt + py0 * cosAprt
            : sqrt(dotp);

    return sqrt(dotp + bounds * bounds - 2.0 * bounds * k) - weight;
}

shader Arc(
  point Point = P,
  float StartAngle = 0.0,
  float StopAngle = M_PI_4,
  float Bounds = 0.5,
  float Weight = 0.01,

  output float Fac = 0.0) {

  /**
   * Cf. Inigo Quilez
   * Arc - distance
   * https://www.shadertoy.com/view/wl23RK
   */


  float a = mod(StartAngle, M_2PI);
  float b = mod(StopAngle, M_2PI);
  float arcLength = 0.5 * mod(b - a, M_2PI);

  Fac = arc(Point, a + arcLength, arcLength, Bounds, Weight);
}