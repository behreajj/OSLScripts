struct Vec2 {
  float x;
  float y;
};

Vec2 __operator__sub__(Vec2 a, Vec2 b) {
  return Vec2(a.x - b.x, a.y - b.y);
}

float dot(Vec2 a, Vec2 b) {
  return a.x * b.x + a.y * b.y;
}

Vec2 __operator__mul__(Vec2 a, float b) {
  return Vec2(a.x * b, a.y * b);
}

Vec2 min(Vec2 a, Vec2 b) {
  return Vec2(min(a.x, b.x), min(a.y, a.y));
}

shader triangle(
    vector Point = vector(u, v, 0.0),
    vector Corner0 = vector(0.0, 0.5, 0.0),
    vector Corner1 = vector(-0.4330127, -0.25, 0.0),
    vector Corner2 = vector(0.4330127, -0.25, 0.0),
    output float Fac = 0.0) {

  Vec2 p = Vec2(Point[0], Point[1]);
  Vec2 p0 = Vec2(Corner0[0], Corner0[1]);
  Vec2 p1 = Vec2(Corner1[0], Corner1[1]);
  Vec2 p2 = Vec2(Corner2[0], Corner2[1]);

  Vec2 e0 = p1 - p0;
  Vec2 e1 = p2 - p1;
  Vec2 e2 = p0 - p2;

  Vec2 v0 = p - p0;
  Vec2 v1 = p - p1;
  Vec2 v2 = p - p2;

  Vec2 pq0 = v0 - e0 * clamp(dot(v0, e0) / dot(e0, e0), 0.0, 1.0);
  Vec2 pq1 = v1 - e1 * clamp(dot(v1, e1) / dot(e1, e1), 0.0, 1.0);
  Vec2 pq2 = v2 - e2 * clamp(dot(v2, e2) / dot(e2, e2), 0.0, 1.0);

  float s = sign(e0.x * e2.y - e0.y * e2.x);

  Vec2 d = min(min(Vec2(dot(pq0, pq0), s * (v0.x * e0.y - v0.y * e0.x)),
                   Vec2(dot(pq1, pq1), s * (v1.x * e1.y - v1.y * e1.x))),
               Vec2(dot(pq2, pq2), s * (v2.x * e2.y - v2.y * e2.x)));
  Fac = -sqrt(d.x) * sign(d.y);
}